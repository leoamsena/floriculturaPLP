package View.CreateUpdate;

import Controller.HomeController;
import Controller.MainController;
import Model.Estoque;

import javax.swing.*;
import javax.swing.text.MaskFormatter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class Flor implements ActionListener {
    private Model.Estoque estoque;
    private JTextField nome;
    private JTextField qtd;
    private JPanel panel;
    private JTextField cor;
    private JComboBox fornecedor;
    private JFormattedTextField valor;
    private JButton enviarButton;
    private JButton cancelarButton;

    public JPanel getPanel() {
        return panel;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == this.enviarButton) { //enviar
            try {
                String nome = this.nome.getText();
                int qtd = Integer.valueOf(this.qtd.getText());
                String cor = this.cor.getText();
                float valor = Float.valueOf(this.valor.getText().substring(3).trim());
                Model.Fornecedor fornecedor = (Model.Fornecedor) this.fornecedor.getSelectedItem();
                if (qtd < 0 || valor < 0)
                    throw new Exception("Quantidade e/ou valor nÃ£o pode(m) ser negativo(s)!");
                if (nome.equals("") || cor.equals(""))
                    throw new Exception("Todos os campos devem ser preenchidos!");
                if (this.estoque != null) { // editar
                    this.estoque.getFlor().setNome(nome);
                    this.estoque.getFlor().setCor(cor);
                    this.estoque.getFlor().setFornecedor(fornecedor);
                    this.estoque.getFlor().setValorIndividual(valor);
                    this.estoque.setQtdEmEstoque(qtd);
                } else { //criar
                    Model.Flor f = new Model.Flor(nome, cor, valor, fornecedor);
                    MainController.addToArrayList(f);
                    MainController.addToArrayList(new Model.Estoque(f, qtd));
                }
                JOptionPane.showMessageDialog(this.panel, "Criado/editado com sucesso!!!");
                (HomeController.genericCRUDList).refreshPainelComponents();
                Component component = (Component) e.getSource();
                ((JDialog) SwingUtilities.getRoot(component)).dispose();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this.panel, ex.getMessage());
            }
        } else if (e.getSource() == this.cancelarButton) { // cancelar
            Component component = (Component) e.getSource();
            ((JDialog) SwingUtilities.getRoot(component)).dispose();
        }

    }

    public Flor() { //criando novo
        $$$setupUI$$$();
        this.enviarButton.addActionListener(this);
        this.cancelarButton.addActionListener(this);
    }

    public Flor(Model.Flor flor) {
        $$$setupUI$$$();
        this.enviarButton.addActionListener(this);
        this.cancelarButton.addActionListener(this);

        ArrayList<Estoque> alEstoque = MainController.getEstoques();
        for(int i=0;i< alEstoque.size();i++) {
            Estoque temp = alEstoque.get(i);
            if (temp.getFlor().getCodigo() == flor.getCodigo()) this.estoque = temp;
        }

        this.nome.setText(estoque.getFlor().getNome());
        this.qtd.setText(Integer.toString(estoque.getQtdEmEstoque()));
        this.cor.setText(estoque.getFlor().getCor());
        this.valor.setText(Float.toString(estoque.getFlor().getValorIndividual()));
        this.fornecedor.setSelectedItem(estoque.getFlor().getFornecedor());

    }

    private void createUIComponents() {
        try {
            this.valor = new JFormattedTextField(new MaskFormatter("R$ ##.##"));
            this.fornecedor = new JComboBox(MainController.getFornecedores().toArray());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this.panel, "Erro desconhecido: " + e.getMessage());
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel = new JPanel();
        panel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(6, 4, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Flor");
        panel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Nome");
        panel.add(label2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Quantidade em estoque");
        panel.add(label3, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nome = new JTextField();
        panel.add(nome, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        qtd = new JTextField();
        panel.add(qtd, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Cor");
        panel.add(label4, new com.intellij.uiDesigner.core.GridConstraints(2, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cor = new JTextField();
        panel.add(cor, new com.intellij.uiDesigner.core.GridConstraints(2, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Valor individual");
        panel.add(label5, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("Fornecedor");
        panel.add(label6, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel.add(fornecedor, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel.add(valor, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        enviarButton = new JButton();
        enviarButton.setText("Enviar");
        panel.add(enviarButton, new com.intellij.uiDesigner.core.GridConstraints(5, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancelarButton = new JButton();
        cancelarButton.setText("Cancelar");
        panel.add(cancelarButton, new com.intellij.uiDesigner.core.GridConstraints(5, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
